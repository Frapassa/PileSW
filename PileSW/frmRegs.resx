<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="imageList1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="imageList1.ImageStream" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj00LjAuMC4w
        LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAAACZTeXN0
        ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkDAAAADwMAAACM
        DQAAAk1TRnQBSQFMAgEBBQEAAVwBAAFcAQABEAEAARABAAT/ARkBAAj/AUIBTQE2BwABNgMAASgDAAFA
        AwABIAMAAQEBAAEYBgABGP8AkwADoAOYA5EDhwN8A3ADYwNWA0sDQAM3AzADMZkAA6IDuAO9CYQDgwOB
        A38DfQN7A3gDXZkAA6UDxgO6A9wDzQPIA8EDuQOxA6oDogORA28Dl5YAA6gD0AO6A8kD1gPQA8sDxQO/
        A7gDrwOnA4wDXJYAA6wD1gPMA7wD3QbRA84DyQPDA7wDtAOsA3EDrJMAA68D2wPjA70DxwPXCdEDzQPH
        A8EDugOiA4CTAAOyA+AD6APNA70D3QzfA94D2wPXA9MDsQOpkAADtAPkA+sD6QbAA74DuwO4A7QDsQOu
        A6oDpwOlA6OQAAO3A+kD7QPrA+kD2hLRA6OZAAO6A+wD7wPtA+sD6APUA7YDsgOuA6oDpgOjmQADuwPb
        Bu8D7QPrA7kD4KgAA+YPuwPg/wD/AP8ArgABdQGEAY8BbAF6AYUBYAFtAXcBUQFdAWYBQgFMAVQBMQE6
        AUEBIwEqATABFgEcASEBDgETARgBDgETARgBDgETARgBDgETARgBDgETARgBDgETARgBDgETARgDAAF1
        AYQBjwFmAYABjwFgAXkBhwFXAW4BewFOAWIBbwFEAVYBYQE5AUgBUgEuAToBQwElAS4BNQEbASIBKQEU
        ARkBHgEOARIBFgEOARMBGAkAAbkBnQF/AbkBnQF/AbkBnQF/AbkBnQF/AbkBnQF/AbkBnQF/AbkBnQF/
        AbkBnQF/AbkBnQF/AbkBnQF/AbkBnQF/AbkBnQF/AbkBnQF/AbkBnQF/AbkBnQF/AwADoAOWA4kDeQNp
        A1cDRwM5FTEDAAF3AYcBkgGiAd8B8AFwAc0B6gFJAbgB4gE3Aa4B2wEtAakB2QEmAaEB0gEhAZgBxwEg
        AY4BvAEeAYMBrgEZAX8BqwEVAXwBqQEbAXcBnwEfAXIBlgEWARwBIQMAAXcBhwGSAYkBoQGrAWoBsgHU
        AQABjwHNAQABjwHNAQABjwHNAQQBjAHHAQgBiAG+AQ8BggG0ARUBfAGpARsBdwGfAR8BcgGWASIBSwFc
        AZsBrQG1BgABuQGdAX8n/wG5AZ0BfwMAA6ID5wPLA7MDpwOhA5oDkgGHAogCggGBBn0DewN4AzoDAAF6
        AYoBlQGqAegB9gGVAeUB/AGEAd8B+wF1AdYB+gFqAdAB9wFdAcYB9AFQAb4B8AFBAbQB7AE1AaoB6AEr
        AaQB5gEgAZoB3wEWAZAB1wEbAXcBnwEgAScBLQMAAXoBigGVAX4BvgHTAYoBpAGuAX4B3AH/AV8BzwH/
        AVUBywH/AUwBxAH6AUEBvAH1ATcBswHwAS4BqgHrASQBoAHlARMBjAHUASMBZwGAAV4BaQFtBgABuQGd
        AX8n/wG5AZ0BfwMAA6UD7gPmA90D1QPOA8YDvgO0A6oDoQOeAZgBmQGYA3wDRwMAAX0BjgGYAbAB6gH2
        AZ8B6QH7AZIB5AH8AYEB3QH7AXUB1gH6AWgBzgH3AV0BxgH0AU0BvAHwAUEBtAHsATUBqgHoASoBowHm
        AR0BlgHcARUBfAGpAS0BNAE7AwABfQGOAZgBeQHSAewBiwGkAa0BiQHCAc4BcQHYAf8BZQHTAf8BXAHO
        Af8BUQHJAf4BSQHBAfoBPwG5AfUBNAGwAe4BKQGoAekBEAGFAc0BIgFLAVsBsgHAAcYDAAG5AZ0Bfwb/
        CQAD/wkABv8DAAP/AbkBnQF/AwADqAPxA+sD5QPcA9UDzQPGA7wCswG0AqoBqQGmAqUDnwKCAYEBVgFX
        AVYDAAGAAZEBnAG2Ae0B+AGqAewB+wGbAegB+wGPAeMB/AGBAd0B+wFxAdUB+QFoAc4B9wFbAcUB9AFN
        AbwB8AE9AbIB7AEyAakB6AEkAZ4B4gEQAYIBtAE7AUMBSwMAAYABkQGcAYEB1wHvAX0BxQHgAYwBpgGw
        AYAB3QH+AWgB0wH/AWcB1AH/AWIB0QH/AVgBzQH/AU4BxwH8AUYBvgH3ATsBtgHyATEBrAHsASUBaQGB
        AXoBlQGhAwABuQGdAX8D/wMABv8DAAP/AwAG/wMAA/8DAAP/AbkBnQF/AwADrAP1A/AD6QPjA9wD0wPN
        A8UDvQG0ArMBrgGtAa4BpwGmAacDiAFnAWYBZwMAAYMBlQGfAb4B8AH5AasB8AH3AaUB7AH7AZgB5wH7
        AYkB4QH8AX8B3QH7AXEB1QH5AWUBzQH3AVgBxAHzAUsBuwHwAT0BsgHsASwBpAHjAQwBigG/AUkBUwFc
        AwABgwGVAZ8BiQHcAfEBjAHiAf8BjQGoAbEBjAG6AccBdAHYAf8BZwHUAf8BZwHUAf8BZwHUAf8BXwHQ
        Af8BVAHNAf8BSwHFAfwBQQG7AfcBLgGiAdsBUQFnAXQBsgHAAcYBuQGdAX8G/wkAA/8DAAb/AwAD/wMA
        A/8BuQGdAX8DAAOvA/kD7wPuA+cD4APbA9MDzAPGAb0BvgG9A7YBrQKuA44DdgMAAYYBmQGjAb4B8AH5
        AbYB7QH4AbAB7gH6AaQB6wH6AZUB5gH7AYkB4QH8AX0B3AH8AXEB1QH5AWUBzQH3AVgBxAHzAUkBuQHv
        ATUBqQHnAQwBjwHHAVcBYwFrAwABhgGaAaMBkgHhAfIBmAHoAf0BgAHEAd4BjgGnAbABgQHeAf0BhAHg
        Af8BhAHgAf8BhAHgAf8BhAHgAf8BgQHfAf8BewHdAf8BdAHYAf8BawHWAf8BVgGpAdEBjwGbAaQBuQGd
        AX8D/wMABv8DAAP/AwAG/wMAA/8DAAP/AbkBnQF/AwADsgP5A/UD8wPtA+YD4APaA9MDzAPDA70BtAG1
        AbQDkgODAwABiQGcAaYBvgHwAfkBtgHtAfgBtgHtAfgBqwHwAfcBogHsAfoBlQHmAfsBiQHhAfwBfQHc
        AfwBbwHTAfoBYwHMAfcBVQHDAfMBSQG5Ae8BGQGZAc8BYwFwAXoDAAGIAZwBpQGaAeYB8wGfAesB+wGY
        AegB/gGLAawBuQGLAawBuQGKAaoBtwGIAaYBswGGAaMBrwGDAZ8BqgGBAZoBpgF/AZUBoQF8AZEBnQF6
        AY4BmQF5AYsBlQF3AYgBkwG5AZ0Bfwb/BgAG/wkABv8DAAP/AbkBnQF/AwADtQP5BvUD7wPsA+YD4APa
        A9IDywPCAbkCugOSA4wDAAGLAaABqAG+AfAB+QG+AfAB+QG+AfAB+QG+AfAB+QG0AfIB+AGqAewB+wGg
        AekB+wGVAeUB/AGKAd8B/AF/AdgB+wF0AdIB+AFoAcoB9AFdAcAB8QFjAXABegMAAYsBoAGoAaAB6gH2
        AaYB7gH5AZ8B6wH7AZgB6AH+AXoB2gH/AWcB1AH/AWcB1AH/AWcB1AH/AWcB1AH/AWcB1AH/AWcB1AH/
        AXcBiAGTCQABuQGdAX8S/wMADP8DAAP/AbkBnQF/AwADtwz5A/QD8APrA+YD4QPbA9QDzAPFA4wDAAGN
        AaEBqgGNAaEBqgGNAaEBqgGNAaEBqgGNAaEBqgGLAZ8BqAGJAZwBpgGJAZsBpgGHAZoBpAGGAZkBowGE
        AZYBoAGEAZYBoAGDAZUBoAGDAZUBoAF1AYQBjwMAAY4BogGrAacB7gH2AasB8AH3AaYB7gH5AZ8B6wH7
        AZgB6AH9AXEB1AH7AYkBngGnAYYBmQGjAYIBlAGfAX4BkAGaAXoBjAGXAXcBiAGTCQABuQGdAX8S/wMA
        DP8DAAP/AbkBnQF/AwAPuQO3BrUDswOyBrAGrwOgAwABjwGkAawBsgHkAewBtgHtAfgBtgHtAfgBqQHs
        AfYBkgHhAfMBjQGhAaoB1QHcAeAYAAGPAaQBrAGgAdIB2gGrAfAB9wGrAfAB9wGmAe4B+QGfAesB+wGN
        AaEBqgHVAdwB4BgAAbkBnQF/J/8BuQGdAX8DAAO7A+0G9QPtA+ADuQPgGAAB2gHeAeEBjwGkAawBjwGk
        AawBjwGkAawBjwGkAawBjwGkAawB1QHcAeAbAAHaAd4B4QGPAaQBrAGPAaQBrAGPAaQBrAGPAaQBrAGP
        AaQBrAHVAdwB4BsAAbkBnQF/J/8BuQGdAX8DAAPmD7sD4HsAAbkBnQF/AbkBnQF/AbkBnQF/AbkBnQF/
        AbkBnQF/AbkBnQF/AbkBnQF/AbkBnQF/AbkBnQF/AbkBnQF/AbkBnQF/AbkBnQF/AbkBnQF/AbkBnQF/
        AbkBnQF/8wABQgFNAT4HAAE+AwABKAMAAUADAAEgAwABAQEAAQEGAAEBFgAD/wEAAv8GAAL/BwABBwcA
        AQcHAAEDBwABAwcAAQEHAAEBFwABBwcAAQcHAAH/BgABAQH/BgAC/wYAAv8GABD/AQABAQEAAQcBAAEB
        AQABAQEAAQEBAAEDAQABAQEAAQEBAAEBAQABAwEAAQEBAAEBAQABAQEAAQEBAAEBAQABAQEAAQEBAAEB
        AQABAQEAAQEBAAEBAwABAQEAAQEBAAEBAwABAQEAAQEBAAEBAwABAQEAAQEBAAEBAQABBwEAAQEBAAEB
        AQABAQEAAQcBAAEBAQABAQEAAf8BAAH/AQABAQEAAf8BAQH/AQEB/wEAAgEF/wEAAQEK/ws=
</value>
  </data>
</root>